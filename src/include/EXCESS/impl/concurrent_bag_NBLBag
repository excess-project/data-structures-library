// concurrent_bag adapter instantiation for the NOBLE NBLBag containers.
//   Copyright (C) 2015  Anders Gidenstam

#ifndef __CONCURRENT_BAG_NBLBAG_H
#define __CONCURRENT_BAG_NBLBAG_H

#include <Noble.h>

namespace excess {

#define MAX_SIZE (64*1024*1024)

template < typename T >
class concurrent_bag_NBLBag
{
private:
  NBLBagRoot *bag;

public:
  class handle
  {
private:
    friend concurrent_bag_NBLBag;
    NBLBag* bag;

    handle(NBLBag* bag)
    {
      this->bag = bag;
    }

  public:
    ~handle()
    {
      NBLBagFreeHandle(bag);
      bag = 0;
    }

    bool insert(T* item)
    {
      NBLBagAdd(bag, item);
      return true;
    }

    bool try_remove_any(T*& item)
    {
      void* res = NBLBagTryRemoveAny(bag);
      if (res) {
        item = (T*)res;
      }
      return res != 0;
    }

    bool empty()
    {
      return NBLBagIsEmpty(bag);
    }

    int size()
    {
      return NBLBagSize(bag);
    }
  };

  concurrent_bag_NBLBag()
  {
    // FIXME!
    // LF_BB, LF_EDTREE
    bag = NBLBagCreateLF_BB(MAX_SIZE);
  }

  ~concurrent_bag_NBLBag()
  {
    NBLBagFree(bag);
  }

  handle get_handle()
  {
    return handle(NBLBagGetHandle(bag));
  }
};

}
#endif
