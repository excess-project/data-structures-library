// concurrent_weak_dictionary adapter instantiation for the
// ChainedHashMap container by Moran Tzafrir, Maurice Herlihy and
// Nir Shavit.
//   Copyright (C) 2015  Anders Gidenstam

#ifndef __CONCURRENT_WEAK_DICTIONARY_HSHTC_H
#define __CONCURRENT_WEAK_DICTIONARY_HSHTC_H

#include <EXCESS/concurrent_weak_dictionary>

#define INTEL64 1
#include <HSHashtable.h>
#undef INTEL64
#undef CAS64
#undef CAS32

namespace excess {

template < class Key, class T >
class concurrent_weak_dictionary_HSHTC
  :  public concurrent_weak_dictionary<Key, T>
{
private:
  // FIXME: The hash function is currently hard-coded.
  typedef ChainedHashMap<Key,T*,hsht::HASH_INT_VOIDPTR,CMDR::TTASLock,CMDR::Memory> hashmap_t;
  hashmap_t* map;
public:
  class handle // Each instance MUST be acquired and used in a single thread.
    : public concurrent_weak_dictionary<Key, T>::handle
  {
  private:
    hashmap_t* map;
  public:
    handle(hashmap_t* map)
    {
      this->map = map;
    }

    ~handle()
    {
      map = 0;
    }

    void insert(Key key, T* value)
    {
      map->putIfAbsent(key, value);
    }

    bool lookup(Key key, T*& value)
    {
      // FIXME: value is not set.
      return map->containsKey(key);
    }

    void remove(Key key)
    {
      map->remove(key);
    }
  };

  concurrent_weak_dictionary_HSHTC(int max_size, int max_cpus)
  {
    map = new hashmap_t(max_size, max_cpus);
  }

  ~concurrent_weak_dictionary_HSHTC()
  {
    delete map;
  }

  typename concurrent_weak_dictionary<Key, T>::handle* get_handle()
  {
    return new handle(map);
  }
};
}
#endif
