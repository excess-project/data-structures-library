// concurrent_stack adapter instantiation for the std::vector class and OpenMP.
//   Copyright (C) 2015  Anders Gidenstam

#ifndef __CONCURRENT_STACK_VECTOR_H
#define __CONCURRENT_STACK_VECTOR_H

#include <omp.h>
#include <vector>

namespace excess {

template < typename T >
class concurrent_stack_vector
{
private:
  std::vector<T*>* stack;

public:
  class handle
  {
  private:
    friend concurrent_stack_vector;
    std::vector<T*>* stack;

    handle(std::vector<T*>* stack)
    {
      this->stack = stack;
    }

  public:
    ~handle()
    {
      stack = 0;
    }
    
    bool insert(T* item)
    {
#pragma omp critical
      {
        stack->push_back(item);
      }
      return true;
    }

    bool try_remove_any(T*& item)
    {
      bool res = false;
#pragma omp critical
      {
        if (!stack->empty()) {
          item = stack->back();
          stack->pop_back();
          res = true;
        }
      }
      return res;
    }

    bool empty()
    {
      bool res;
#pragma omp critical
      {
        res = stack->empty();
      }
      return res;
    }

    int size()
    {
      int res;
#pragma omp critical
      {
        res = stack->size();
      }
      return res;
    }
  };

  concurrent_stack_vector()
  {
    stack = new std::vector<T*>();
  }

  ~concurrent_stack_vector()
  {
    delete stack;
  }

  handle get_handle()
  {
    return handle(stack);
  }
};

}
#endif
