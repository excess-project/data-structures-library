// concurrent_weak_dictionary adapter instantiation for the EXCESS tree
// library DeltaTree container.
// Copyright (C) 2016  Anders Gidenstam
//
// This library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

#ifndef __CONCURRENT_WEAK_DICTIONARY_DELTATREE_H
#define __CONCURRENT_WEAK_DICTIONARY_DELTATREE_H

#include <EXCESS/concurrent_weak_dictionary>

namespace c_deltatree {
extern "C" {
// The DeltaTree header defines and includes too many things that one
// would not want to clutter the client's scope.
// NOTE: For some reason libdeltatree exports its functions as greenbst_*.
typedef struct global deltatree_t;
typedef void*  key_t;

deltatree_t* greenbst_alloc();
int          greenbst_free(deltatree_t* map);
int          greenbst_insert(deltatree_t* map, key_t key, void* data);
int          greenbst_contains(deltatree_t* map, key_t key);
void*        greenbst_get(deltatree_t* map, key_t key);
int          greenbst_delete(deltatree_t* map, key_t key);
}
}

namespace excess {

// NOTE: The values of the Key type MUST fit within an unsigned int.
//       (Yes, the internal DeltaTree functions seem to use int keys.)
template < class Key, class T >
class concurrent_weak_dictionary_DeltaTree
  :  public concurrent_weak_dictionary<Key, T>
{
private:
  c_deltatree::deltatree_t* search_tree;
public:
  class handle // Each instance MUST be acquired and used in a single thread.
    : public concurrent_weak_dictionary<Key, T>::handle
  {
  private:
    c_deltatree::deltatree_t* search_tree;
  public:
    handle(c_deltatree::deltatree_t* search_tree)
    {
      this->search_tree = search_tree;
    }

    ~handle()
    {
      search_tree = 0;
    }

    void insert(Key key, T* value)
    {
      c_deltatree::greenbst_insert(search_tree,
                                   (c_deltatree::key_t)key,
                                   reinterpret_cast<void*>(value));
    }

    bool lookup(Key key, T*& value)
    {
      return
        0 != (value = reinterpret_cast<T*>
                        (c_deltatree::greenbst_get(search_tree,
                                                   (c_deltatree::key_t)key)));
    }

    void remove(Key key)
    {
      c_deltatree::greenbst_delete(search_tree, (c_deltatree::key_t)key);
    }
  };

  concurrent_weak_dictionary_DeltaTree()
  {
    search_tree = c_deltatree::greenbst_alloc();
  }

  ~concurrent_weak_dictionary_DeltaTree()
  {
    // FIXME: The deltatree_free() function is missing in the object file.
    //c_deltatree::deltatree_free(search_tree);
    search_tree = 0;
  }

  typename concurrent_weak_dictionary<Key, T>::handle* get_handle()
  {
    return new handle(search_tree);
  }
};
}
#endif
