// concurrent_bag adapter instantiation for the Michael and Scott two lock
// queue container.
//   Copyright (C) 2015  Anders Gidenstam

#ifndef __CONCURRENT_BAG_MSTLB_H
#define __CONCURRENT_BAG_MSTLB_H

#include <EXCESS/concurrent_bag>

#include "concurrent_queue_MSTLB"

namespace excess {

template < typename T >
class concurrent_bag_MSTLB
  : public concurrent_bag<T>
{
private:
  concurrent_queue_MSTLB<T>* queue;

public:
  class handle // Each instance MUST be acquired and used in a single thread.
    : public concurrent_bag<T>::handle
  {
private:
    friend concurrent_bag_MSTLB;
    typename concurrent_queue_MSTLB<T>::handle* queue;

    handle(concurrent_queue_MSTLB<T>* queue)
    {
      this->queue = queue->get_handle();
    }

  public:
    ~handle()
    {
      delete queue;
      queue = 0;
    }

    void insert(T* item)
    {
      queue->enqueue(item);
    }

    bool try_remove_any(T*& item)
    {
      return queue->try_dequeue(item);
    }

    bool empty()
    {
      return queue->empty();
    }
  };

  concurrent_bag_MSTLB()
  {
    queue = new concurrent_queue_MSTLB<T>();
  }

  ~concurrent_bag_MSTLB()
  {
    delete queue;
  }

  handle* get_handle()
  {
    return new handle(queue);
  }
};

}
#endif
