// concurrent_weak_dictionary adapter instantiation for the TBB
// concurrent_hash_map container.
//   Copyright (C) 2015  Anders Gidenstam

#ifndef __CONCURRENT_WEAK_DICTIONARY_TBBHASHMAP_H
#define __CONCURRENT_WEAK_DICTIONARY_TBBHASHMAP_H

#include <EXCESS/concurrent_weak_dictionary>

#include  <tbb/concurrent_hash_map.h>

namespace excess {

template < class Key, class T >
class concurrent_weak_dictionary_TBBhashmap
  :  public concurrent_weak_dictionary<Key, T>
{
private:
  tbb::concurrent_hash_map<Key, T*>* hashmap;
public:
  class handle // Each instance MUST be acquired and used in a single thread.
    : public concurrent_weak_dictionary<Key, T>::handle
  {
  private:
    tbb::concurrent_hash_map<Key, T*>* hashmap;
  public:
    handle(tbb::concurrent_hash_map<Key, T*>* hashmap)
    {
      this->hashmap = hashmap;
    }

    ~handle()
    {
      hashmap = 0;
    }

    void insert(Key key, T* value)
    {
      hashmap->insert(std::pair<Key,T*>(key,value));
    }

    bool lookup(Key key, T*& value)
    {
      // FIXME: Set the out parameter. Will need to use find().
      return hashmap->count(key) > 0;
    }

    void remove(Key key)
    {
      hashmap->erase(key);
    }
  };

  concurrent_weak_dictionary_TBBhashmap()
  {
    hashmap = new tbb::concurrent_hash_map<Key, T*>();
  }

  ~concurrent_weak_dictionary_TBBhashmap()
  {
    delete hashmap;
  }

  typename concurrent_weak_dictionary<Key, T>::handle* get_handle()
  {
    return new handle(hashmap);
  }
};
}
#endif
