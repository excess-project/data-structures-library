// EXCESS concurrent_queue adapters.
//   Copyright (C) 2015  Anders Gidenstam

#ifndef __CONCURRENT_QUEUE_H
#define __CONCURRENT_QUEUE_H

namespace excess {

template < typename T >
class concurrent_queue
{
public:
  class handle // Each instance MUST be acquired and used in a single thread.
  {
  public:
    virtual ~handle() {}

    virtual void enqueue(T* item)      = 0;
    virtual bool try_dequeue(T*& item) = 0;
    virtual bool empty()               = 0;

    //int  size(); // NOTE: Often not atomic, sometimes not even thread-safe.
  protected:
    handle() {}
  private:
    // Disallow copying and assignment.
    handle(const handle&);
    void operator=(const handle&);
  };

  virtual ~concurrent_queue() {}
  virtual handle* get_handle() = 0;
  // NOTE: Each handle MUST be acquired and used in a single thread and
  //       the handle MUST be deleted when no longer needed.
protected:
  concurrent_queue() {}
private:
  // Disallow copying and assignment.
  concurrent_queue(const concurrent_queue&);
  void operator=(const concurrent_queue&);
};
}

// NOBLE
#ifdef USE_NOBLE
#include "impl/concurrent_queue_NBLQueue"
#endif

// Intel TBB
#ifdef USE_TBB 
#include "impl/concurrent_queue_TBBQueue"
#endif

// Two-lock queue by M. Michael and M. Scott.
#include "impl/concurrent_queue_MSTLB"

#endif
